<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>swift</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\bswift</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Swift</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#shebang-line</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#attribute</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#literal</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#declaration</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#storage-type</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keyword</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-global-function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-property</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-static-property</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin-constant</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#section-punctuation</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>arithmetic-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\+|\-|\*|\/)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.swift</string>
		</dict>
		<key>array-type</key>
		<dict>
			<key>begin</key>
			<string>\b(Array)(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.array.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.array.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.array.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>assignment-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\+|\-|\*|\/|%|&lt;&lt;|&gt;&gt;|&amp;|\^|\||&amp;&amp;|\|\|)?=(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.assignment.swift</string>
		</dict>
		<key>attribute</key>
		<dict>
			<key>comment</key>
			<string>attribute</string>
			<key>name</key>
			<string>meta.attribute.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>((@)(\B\$[0-9]+|\b[\w^\d][\w\d]*\b|\B`[\w^\d][\w\d]*`\B))(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute-arguments.begin.swift</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.attribute.arguments.swift</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute-arguments.end.swift</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.attribute.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attribute.swift</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((@)(\B\$[0-9]+|\b[\w^\d][\w\d]*\b|\B`[\w^\d][\w\d]*`\B))</string>
				</dict>
			</array>
		</dict>
		<key>bitwise-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(&amp;|\||\^|&lt;&lt;|&gt;&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.bitwise.swift</string>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>match</key>
			<string>\b(true|false)\b</string>
			<key>name</key>
			<string>constant.language.boolean.swift</string>
		</dict>
		<key>branch-statement-keyword</key>
		<dict>
			<key>name</key>
			<string>keyword.control.branch.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#if-statement-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-statement-keyword</string>
				</dict>
			</array>
		</dict>
		<key>builtin-class-type</key>
		<dict>
			<key>comment</key>
			<string>Builtin class types</string>
			<key>match</key>
			<string>\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\b</string>
			<key>name</key>
			<string>support.class.swift</string>
		</dict>
		<key>builtin-constant</key>
		<dict>
			<key>comment</key>
			<string>Process is really an enum, but it acts like a constant</string>
			<key>match</key>
			<string>\bProcess\b</string>
			<key>name</key>
			<string>support.constant.swift</string>
		</dict>
		<key>builtin-enum-type</key>
		<dict>
			<key>comment</key>
			<string>Builtin enum types</string>
			<key>match</key>
			<string>\b(MirrorDisposition|Bit|ImplicitlyUnwrappedOptional|Optional|UnicodeDecodingResult|QuickLookObject|FloatingPointClassification)\b</string>
			<key>name</key>
			<string>support.type.swift</string>
		</dict>
		<key>builtin-function</key>
		<dict>
			<key>comment</key>
			<string>Functions provided in the standard library; found by searching ^[ \t]+func\s+(\w+?)[&lt;(]</string>
			<key>match</key>
			<string>(?&lt;=\.)(s(tartsWith|ort|u(ccessor|perclassMirror|btract)|amePositionIn)|has(Suffix|Prefix)|next(Object)?|c(haracterAtIndex|o(ntains|untByEnumeratingWithState|pyWithZone)|ustom(Mirror|PlaygroundQuickLook)|lamp)|t(o(IntMax|Opaque|UIntMax)|ake(RetainedValue|UnretainedValue))|i(s(S(trictSu(persetOf|bsetOf)|u(persetOf|bsetOf))|DisjointWith|EmptyInput|ASCII)|n(tersect|itialize(From)?|dex(Of|ForKey)))|object(Enumerator|ForKey|AtIndex)|d(istanceTo|e(s(cendant|troy)|alloc))|un(ion|derestimateCount)|join|p(ut|redecessor)|e(scape|numerate|lementsEqual|xclusiveOr)|keyEnumerator|f(ilter|latMap)|w(ith(CString|U(nsafe(MutablePointer(s|To(Elements|Value))|BufferPointer)|TF8Buffer))|riteTo)|le(ngth|xicographicalCompare)|a(ssign(BackwardFrom|From)|dvancedBy|utorelease)|re(tain|duce|verse|questNativeBuffer|lease)|ge(nerate|t(Mirror|Objects))|m(inElement|ove(Initialize(BackwardFrom|From)|AssignFrom)?|ember|a(p|xElement)))\b</string>
			<key>name</key>
			<string>support.function.swift</string>
		</dict>
		<key>builtin-global-function</key>
		<dict>
			<key>comment</key>
			<string>Global functions provided in the standard library; found by searching ^func\s+(\w+?)[&lt;(]</string>
			<key>match</key>
			<string>\b(s(tride(of(Value)?)?|izeof(Value)?|ort|uffix|pli(ce|t)|wap)|numericCast|transcode|i(sUniquelyReferenced(NonObjC)?|nsert)|zip|overlaps|d(istance|ump|ebugPrint|rop(First|Last))|unsafe(BitCast|Downcast|Unwrap|AddressOf)|join|pr(int|e(condition|fix))|extend|with(Unsafe(MutablePointer(s)?|Pointer(s)?)|ExtendedLifetime|VaList)|lazy|a(ssert(ionFailure)?|nyGenerator|dvance|lignof(Value)?|bs)|re(flect|adLine|move(Range|Last|A(tIndex|ll)))|getVaList|m(in|ax))\b</string>
			<key>name</key>
			<string>support.function.swift</string>
		</dict>
		<key>builtin-property</key>
		<dict>
			<key>comment</key>
			<string>Properties provided in the standard library; found by searching ^\s+var\s+(\w+?)\W</string>
			<key>match</key>
			<string>(?&lt;=\.)(s(t(art(Index)?|ringValue)|ummary)|has(hValue|PointerRepresentation)|nulTerminatedUTF8|c(haracters|ount|apacity)|i(s(S(ign(Minus|aling)|ubnormal)|N(ormal|aN)|Infinite|Zero|Empty|Finite|ASCII)|ndices|dentity)|o(wner|bjectIdentifier)|d(isposition|e(scription|bugDescription))|u(nicodeScalar(s)?|tf(16|8(Start)?)|intValue|ppercaseString)|end(Index)?|value(s|Type)?|keys|quickLookObject|f(irst|loatingPointClass)|l(ittleEndian|owercaseString|ast)|a(llocatedElementCount|rray)|rawValue|memory|b(yteS(ize|wapped)|igEndian|oolValue|uffer|aseAddress))\b</string>
			<key>name</key>
			<string>support.variable.swift</string>
		</dict>
		<key>builtin-protocol-type</key>
		<dict>
			<key>comment</key>
			<string>Builtin protocol types</string>
			<key>match</key>
			<string>\b(Ra(n(domAccessIndexType|geReplaceableCollectionType)|wRepresentable)|GeneratorType|M(irror(Type|PathType)|utable(Sliceable|CollectionType))|B(i(twiseOperationsType|directionalIndexType)|oolean(Type|LiteralConvertible))|S(tr(i(ng(InterpolationConvertible|LiteralConvertible)|deable)|eamable)|i(nkType|gned(NumberType|IntegerType))|e(tAlgebraType|quenceType)|liceable)|Hashable|NilLiteralConvertible|C(o(llectionType|mparable)|ustom(Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArgType)|Inte(rvalType|ger(Type|LiteralConvertible|ArithmeticType))|O(utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(signedIntegerType|icode(ScalarLiteralConvertible|CodecType))|E(quatable|rrorType|xten(sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(orwardIndexType|loat(ingPointType|LiteralConvertible))|A(ny(CollectionType|Object)|rrayLiteralConvertible|bsoluteValuable))\b</string>
			<key>name</key>
			<string>support.type.swift</string>
		</dict>
		<key>builtin-static-property</key>
		<dict>
			<key>comment</key>
			<string>Static properties provided in the standard library; found by searching ^\s*(class|static)\s+var\s+(\w+?)\W</string>
			<key>match</key>
			<string>(?&lt;=\.)(infinity|NaN|quietNaN|allZeros|m(in|ax))\b|(?&lt;=\bProcess\.)(arguments|argc|unsafeArgv)\b</string>
			<key>name</key>
			<string>support.variable.swift</string>
		</dict>
		<key>builtin-struct-type</key>
		<dict>
			<key>comment</key>
			<string>Builtin struct types</string>
			<key>match</key>
			<string>\b(R(e(peat|verse(RandomAccess(Collection|Index)|Collection|Index))|a(nge(Generator)?|wByte))|Generator(Sequence|OfOne)|M(irror|a(nagedBufferPointer|p(Generator|Sequence|Collection)))|Bool|S(t(aticString|ri(ng|deT(hrough(Generator)?|o(Generator)?)))|inkOf|et(Generator|Index)?)|HalfOpenInterval|C(haracter|o(ntiguousArray|llectionOfOne)|OpaquePointer|losedInterval|VaListPointer)|In(t(16|8|32|64)?|dexingGenerator)|Zip2(Generator|Sequence)|ObjectIdentifier|D(ictionary(Generator|Index|Literal)?|ouble)|U(n(safe(Mutable(BufferPointer|Pointer)|BufferPointer(Generator)?|Pointer)|icodeScalar|managed)|TF(16|8|32)|Int(16|8|32|64)?)|PermutationGenerator|E(numerate(Generator|Sequence)|mpty(Generator|Collection))|F(ilter(Generator|Sequence|Collection(Index)?)|loat(80)?)|Lazy(RandomAccessCollection|BidirectionalCollection|Sequence|ForwardCollection)|A(ny(RandomAccess(Collection|Index)|Bidirectional(Collection|Index)|Sequence|Forward(Collection|Index))|utoreleasingUnsafeMutablePointer|rray(Slice)?))\b</string>
			<key>name</key>
			<string>support.type.swift</string>
		</dict>
		<key>builtin-type</key>
		<dict>
			<key>comment</key>
			<string>Types provided in the standard library; found by searching ^(@objc\s+)?(struct|protocol|class|enum)\s+(\w+)[\s&lt;].+$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-class-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-enum-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-protocol-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-struct-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#builtin-typealias</string>
				</dict>
			</array>
		</dict>
		<key>builtin-typealias</key>
		<dict>
			<key>comment</key>
			<string>Builtin typealiases</string>
			<key>match</key>
			<string>\b(BooleanLiteralType|StringLiteralType|C(Bool|S(hort|ignedChar)|Char(16|32)?|Int|Double|Unsigned(Short|Char|Int|Long(Long)?)|Float|WideChar|Long(Long)?)|Int(Max|egerLiteralType)|U(nicodeScalarType|IntMax|Word)|PlaygroundQuickLook|ExtendedGraphemeClusterType|Void|Float(32|LiteralType|64)|Word|Any(Class)?)\b</string>
			<key>name</key>
			<string>support.type.swift</string>
		</dict>
		<key>capture-specifier</key>
		<dict>
			<key>comment</key>
			<string>matches weak, unowned, unowned(safe), unowned(unsafe)</string>
			<key>match</key>
			<string>\b(weak|unowned(?:\((?:un)?safe\))?)</string>
			<key>name</key>
			<string>keyword.other.capture-specifier.swift</string>
		</dict>
		<key>coalescing-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![?/=\-+!*%&lt;&gt;&amp;|\^~.])\?\?(?![?/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.coalescing.swift</string>
		</dict>
		<key>code-block</key>
		<dict>
			<key>begin</key>
			<string>(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.code-block.begin.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>code-block</string>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.code-block.end.swift</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>collection-type</key>
		<dict>
			<key>comment</key>
			<string>Collection types</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#array-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#dictionary-type</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>comment</key>
			<string>All comment types</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inline-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#inline</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>block</key>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
					</array>
					<key>repository</key>
					<dict>
						<key>nested</key>
						<dict>
							<key>begin</key>
							<string>/\*</string>
							<key>end</key>
							<string>\*/</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#block-nested</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<key>block-doc</key>
				<dict>
					<key>begin</key>
					<string>/\*\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.documentation.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.block.documentation.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.documentation.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#nested</string>
						</dict>
						<dict>
							<key>include</key>
							<string>text.restructuredtext#tags</string>
						</dict>
					</array>
					<key>repository</key>
					<dict>
						<key>nested</key>
						<dict>
							<key>begin</key>
							<string>/\*</string>
							<key>end</key>
							<string>\*/</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#block-nested</string>
								</dict>
								<dict>
									<key>include</key>
									<string>text.restructuredtext#tags</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<key>inline</key>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\n)</string>
							<key>name</key>
							<string>comment.line.double-slash.swift</string>
						</dict>
					</array>
				</dict>
				<key>inline-doc</key>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=///)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>///</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.swift</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\n)</string>
							<key>name</key>
							<string>comment.line.triple-slash.swift</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>comparative-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])((=|!)==?|(&lt;|&gt;)=?|~=)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.comparative.swift</string>
		</dict>
		<key>control-transfer-statement-keyword</key>
		<dict>
			<key>comment</key>
			<string>control-transfer-statement</string>
			<key>match</key>
			<string>\b(continue|break|fallthrough|return)\b</string>
			<key>name</key>
			<string>keyword.control.transfer.swift</string>
		</dict>
		<key>custom-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\s(\[{,;:])([/=\-+!*%&lt;&gt;&amp;|\^~.]++)(?![\s)\]},;:])</string>
					<key>name</key>
					<string>keyword.operator.custom.prefix.unary.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\s(\[{,;:])([/=\-+!*%&lt;&gt;&amp;|\^~.]++)(?![\s)\]},;:\.])</string>
					<key>name</key>
					<string>keyword.operator.custom.postfix.unary.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\s(\[{,;:])([/=\-+!*%&lt;&gt;&amp;|\^~.]++)(?=[\s)\]},;:])</string>
					<key>name</key>
					<string>keyword.operator.custom.binary.swift</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>comment</key>
			<string>declaration</string>
			<key>name</key>
			<string>meta.declaration.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
			</array>
		</dict>
		<key>declaration-specifier</key>
		<dict>
			<key>comment</key>
			<string>declaration-specifier</string>
			<key>match</key>
			<string>\b(class|deinit|enum|extension|func|import|init|inout|internal|let|operator|private|protocol|public|static|struct|subscript|typealias|var)\b</string>
			<key>name</key>
			<string>keyword.other.declaration-specifier.swift</string>
		</dict>
		<key>dictionary-type</key>
		<dict>
			<key>begin</key>
			<string>\b(Dictionary)(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.dictionary.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.dictionary.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.dictionary.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.dictionary.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>floating-point-literal</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.floating-point.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>floating-point-literal -&gt; (decimal-literal)(decimal-fraction)?(decimal-exponent)?</string>
					<key>match</key>
					<string>\b([0-9][0-9_]*)(\.([0-9][0-9_]*))?([eE][+\-]?([0-9][0-9_]*))?\b</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>floating-point-literal -&gt; (hexadecimal-literal)(hexadecimal-fraction)?(hexadecimal-exponent)</string>
					<key>match</key>
					<string>\b(0x\h[\h_]*)(\.(0x\h[\h_]*))?([pP][+\-]?(0x\h[\h_]*))\b</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(func)\s+(\B\$[0-9]+|\b[\w^\d][\w\d]*\b|\B`[\w^\d][\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+)\s*(?=\(|&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>function-declaration</string>
			<key>end</key>
			<string>(?&lt;=\})|$</string>
			<key>name</key>
			<string>meta.function-declaration.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-result</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.function.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function-declaration.body.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-result</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.function-result.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>function-result</string>
			<key>end</key>
			<string>(?=\{)|$</string>
			<key>name</key>
			<string>meta.function-result.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>generic-parameter-clause</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.generic-parameter-clause.begin.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>generic-parameter-clause</string>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.generic-parameter-clause.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.generic-parameter-clause.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>identifier</key>
		<dict>
			<key>comment</key>
			<string>identifier</string>
			<key>match</key>
			<string>(\B\$[0-9]+|\b[\w^\d][\w\d]*\b|\B`[\w^\d][\w\d]*`\B)</string>
			<key>name</key>
			<string>meta.identifier.swift</string>
		</dict>
		<key>if-statement-keyword</key>
		<dict>
			<key>comment</key>
			<string>if-statement</string>
			<key>match</key>
			<string>\b(if|else)\b</string>
			<key>name</key>
			<string>keyword.control.if.swift</string>
		</dict>
		<key>import-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.import.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.type.module.import.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>import-declaration</string>
			<key>match</key>
			<string>\b(import)\s+(?:(typealias|struct|class|enum|protocol|var|func)\s+)?((?:\B\$[0-9]+|\b[\w^\d][\w\d]*\b|\B`[\w^\d][\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+)(?:\.(?:\B\$[0-9]+|\b[\w^\d][\w\d]*\b|\B`[\w^\d][\w\d]*`\B|[/=\-+!*%&lt;&gt;&amp;|\^~.]+))*)</string>
			<key>name</key>
			<string>meta.import.swift</string>
		</dict>
		<key>increment-decrement-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(\+\+|\-\-)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.increment-or-decrement.swift</string>
		</dict>
		<key>integer-literal</key>
		<dict>
			<key>name</key>
			<string>constant.numeric.integer.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>binary-literal</string>
					<key>match</key>
					<string>(\B\-|\b)(0b[01][01_]*)\b</string>
					<key>name</key>
					<string>constant.numeric.integer.binary.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>octal-literal</string>
					<key>match</key>
					<string>(\B\-|\b)(0o[0-7][0-7_]*)\b</string>
					<key>name</key>
					<string>constant.numeric.integer.octal.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>decimal-literal</string>
					<key>match</key>
					<string>(\B\-|\b)([0-9][0-9_]*)\b</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>hexadecimal-literal</string>
					<key>match</key>
					<string>(\B\-|\b)(0x\h[\h_]*)\b</string>
					<key>name</key>
					<string>constant.numeric.integer.hexadecimal.swift</string>
				</dict>
			</array>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#branch-statement-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-transfer-statement-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#loop-statement-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration-specifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#capture-specifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operator-declaration-keyword</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>declaration keyword</string>
					<key>match</key>
					<string>\b(class|deinit|enum|extension|func|import|init|inout|internal|let|operator|private|protocol|public|static|struct|subscript|typealias|var)\b</string>
					<key>name</key>
					<string>storage.type.declaration.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>statement keyword</string>
					<key>match</key>
					<string>\b(break|case|continue|default|defer|do|else|fallthrough|for|guard|if|in|repeat|return|switch|where|while)\b</string>
					<key>name</key>
					<string>keyword.control.statement.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>expression and type keyword</string>
					<key>match</key>
					<string>\b(as|catch|dynamicType|false|is|nil|rethrows|super|self|Self|throw|throws|true|try|__COLUMN__|__FILE__|__FUNCTION__|__LINE__)\b</string>
					<key>name</key>
					<string>keyword.other.statement.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>other keyword</string>
					<key>match</key>
					<string>\b(associativity|convenience|dynamic|didSet|final|get|infix|indirect|lazy|left|mutating|none|nonmutating|optional|override|postfix|precedence|prefix|Protocol|required|right|set|Type|unowned|weak|willSet)\b</string>
					<key>name</key>
					<string>keyword.other.swift</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#integer-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#floating-point-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nil-literal</string>
				</dict>
			</array>
		</dict>
		<key>logical-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(!|&amp;&amp;|\|\|)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.logical.swift</string>
		</dict>
		<key>loop-statement-keyword</key>
		<dict>
			<key>comment</key>
			<string>loop-statement</string>
			<key>match</key>
			<string>\b(while|do|for|in)\b</string>
			<key>name</key>
			<string>keyword.control.loop.swift</string>
		</dict>
		<key>nil-literal</key>
		<dict>
			<key>match</key>
			<string>\bnil\b</string>
			<key>name</key>
			<string>constant.language.nil.swift</string>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comparative-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#assignment-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#logical-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#remainder-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#increment-decrement-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#overflow-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#range-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bitwise-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arithmetic-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ternary-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-casting-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#coalescing-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#custom-operator</string>
				</dict>
			</array>
		</dict>
		<key>operator-declaration-keyword</key>
		<dict>
			<key>comment</key>
			<string>operator-declaration</string>
			<key>match</key>
			<string>\b(operator|prefix|infix|postfix)\b</string>
			<key>name</key>
			<string>keyword.other.operator.swift</string>
		</dict>
		<key>optional-type</key>
		<dict>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.optional.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.optional.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.optional.end.swift</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(Optional)(&lt;)</string>
			<key>name</key>
			<string>meta.optional.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>overflow-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])\&amp;(\+|\-|\*|\/|%)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.overflow.swift</string>
		</dict>
		<key>parameter-clause</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function-arguments.begin.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>parameter-clause</string>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function-arguments.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameter-clause.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>named parameters</string>
					<key>match</key>
					<string>\b([\w^\d][\w\d]*)\b\s+\b([\w^\d][\w\d]*)\b</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>protocol-composition-type</key>
		<dict>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.type.protocol.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.protocol.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.protocol.end.swift</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(protocol)(&lt;)</string>
			<key>name</key>
			<string>meta.protocol.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>range-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])\.\.[.&lt;]?(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.range.swift</string>
		</dict>
		<key>remainder-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])\%(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
			<key>name</key>
			<string>keyword.operator.remainder.swift</string>
		</dict>
		<key>section-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Allows the special return snippet to fire.</string>
					<key>match</key>
					<string>(\{)(\})</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Allows the special return snippet to fire.</string>
					<key>match</key>
					<string>(\()(\))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.begin.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.scope.end.swift</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Allows the special return snippet to fire.</string>
					<key>match</key>
					<string>(\[)(\])</string>
				</dict>
			</array>
		</dict>
		<key>shebang-line</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.line.shebang.swift</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Shebang line</string>
			<key>match</key>
			<string>^(#!).*$</string>
			<key>name</key>
			<string>comment.line.shebang.swift</string>
		</dict>
		<key>special-literal</key>
		<dict>
			<key>match</key>
			<string>\b__(FILE|LINE|COLUMN|FUNCTION)__\b</string>
			<key>name</key>
			<string>keyword.other.literal.swift</string>
		</dict>
		<key>storage-type</key>
		<dict>
			<key>match</key>
			<string>\b(var|func|let|class|enum|struct|protocol|extension|typealias)\b</string>
			<key>name</key>
			<string>storage.type.swift</string>
		</dict>
		<key>string-literal</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[0\\tnr"']</string>
					<key>name</key>
					<string>constant.character.escape.swift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\u\{\h{1,8}\}</string>
					<key>name</key>
					<string>constant.character.escape.swift</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\\\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.begin.swift</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>source.swift</string>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.end.swift</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>source.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.line.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>comment</key>
							<string>Nested parens</string>
							<key>end</key>
							<string>\)</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unrecognized-escape.swift</string>
				</dict>
			</array>
		</dict>
		<key>switch-statement-keyword</key>
		<dict>
			<key>comment</key>
			<string>switch-statement</string>
			<key>match</key>
			<string>\b(switch|case|default|where)\b</string>
			<key>name</key>
			<string>keyword.control.switch.swift</string>
		</dict>
		<key>ternary-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;=[\s(\[{,;:])(\?|:)(?=[\s)\]},;:])</string>
			<key>name</key>
			<string>keyword.operator.ternary.swift</string>
		</dict>
		<key>type</key>
		<dict>
			<key>comment</key>
			<string>type</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtin-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#collection-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#optional-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#protocol-composition-type</string>
				</dict>
			</array>
		</dict>
		<key>type-casting-operator</key>
		<dict>
			<key>match</key>
			<string>\b(is\b|as([!?]\B|\b))</string>
			<key>name</key>
			<string>keyword.operator.type-casting.swift</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.swift</string>
	<key>uuid</key>
	<string>D133338A-DEED-4ECC-9852-A392C44D10AC</string>
</dict>
</plist>
